#include "FixedCapacityStack.h"

FixedCapacityStack::FixedCapacityStack(int capacity) {
    a = new int[capacity];
    n = 0;
}

FixedCapacityStack::~FixedCapacityStack() {
    delete[] a;
}

bool FixedCapacityStack::empty() const {
    return n == 0;
}

bool FixedCapacityStack::full() const {
    // Предполагается, что размер стека фиксирован, и его максимальная вместимость равна capacity
    return n == capacity;
}

void FixedCapacityStack::push(int item) {
    if (full()) {
        throw std::overflow_error("Stack is full");
    }
    a[n++] = item;
}

int FixedCapacityStack::pop() {
    if (empty()) {
        throw std::underflow_error("Stack is empty");
    }
    return a[--n];
}

int FixedCapacityStack::top() const {
    if (empty()) {
        throw std::underflow_error("Stack is empty");
    }
    return a[n - 1];
}

std::ostream& operator<<(std::ostream& os, const FixedCapacityStack& st) {
    for (int i = st.n - 1; i >= 0; i--) {
        os << st.a[i] << " ";
    }
    return os;
}
